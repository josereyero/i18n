<?php
// $Id: i18n.module,v 1.41.2.49.2.1 2010/09/14 11:30:30 jareyero Exp $

/**
 * @file
 * Internationalization (i18n) module - Node handling
 */

/**
 * Implements hook_menu().
 */
function i18n_node_menu() {
  // Autocomplete callback for nodes
  $items['i18n/node/autocomplete'] = array(
    'title' => 'Node title autocomplete',
    'page callback' => 'i18n_node_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'i18n_node.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Take over the node translation page.
 */
function i18n_node_menu_alter(&$items) {
  $items['node/%node/translate']['page callback'] = 'i18n_node_translation_overview';
  $items['node/%node/translate']['file'] = 'i18n_node.pages.inc';
  $items['node/%node/translate']['module'] = 'i18n_node';
}

/**
 * Get node language.
 */
function i18n_node_get_lang($nid, $default = '') {
  $lang = db_result(db_query('SELECT language FROM {node} WHERE nid = %d', $nid));
  return $lang ? $lang : $default ;
}

/**
 * Get allowed languages for node.
 *
 * This allows node types to define its own language list implementing hook 'language_list'.
 *
 * @param $node
 *   Node to retrieve language list for.
 * @param $translate
 *   Only languages available for translation. Filter out existing translations.
 */
function i18n_node_language_list($node, $translate = FALSE) {
  // Check if the node module manages its own language list.
  $languages = node_invoke($node, 'language_list', $translate);

  if (!$languages) {
    if (variable_get('i18n_node_'. $node->type, 0) >= LANGUAGE_SUPPORT_EXTENDED) {
      $languages = locale_language_list('name', TRUE); // All defined languages
    }
    else {
      $languages = locale_language_list(); // All enabled languages
    }
    if ($translate && isset($node->tnid) && $node->tnid && ($translations = translation_node_get_translations($node->tnid))) {
      unset($translations[$node->language]);
      foreach (array_keys($translations) as $langcode) {
        unset($languages[$langcode]);
      }
    }
    // Language may be locked for this node type, restrict options to current one
    if (variable_get('i18n_lock_node_' . $node->type, 0) && !empty($node->language) && !empty($languages[$node->language])) {
      $languages = array($node->language => $languages[$node->language]);
    }
    // Check language required for this type (no language neutral)
    elseif (!variable_get('i18n_required_node_' . $node->type, 0)) {
      $languages = array('' => t('Language neutral')) + $languages;
    }
  }

  return $languages;
}


/**
 * Implements hook_nodeapi().
 */
function i18n_node_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $language;

  if (variable_get('language_content_type_' . $node->type, 0)) {
    // Set current language for new nodes if option enabled
    if ($op == 'prepare' && empty($node->nid) && empty($node->language) && variable_get('i18n_newnode_current_' . $node->type, 0)) {
      $node->language = $language->language;
    }
  }
}

/**
 * Implements hook_alter_translation_link().
 *
 * Handles links for extended language. The links will have current language.
 */
function i18n_node_translation_link_alter(&$links, $path) {
  global $language;

  // Check for a node related path, and for its translations.
  if ((preg_match("!^node/([0-9]+)(/.+|)$!", $path, $matches)) && ($node = node_load((int)$matches[1])) && !empty($node->tnid)) {
    // make sure language support is set to LANGUAGE_SUPPORT_EXTENDED, so links
    // dont get added for LANGUAGE_SUPPORT_EXTENDED_NOT_DISPLAYED
    if (variable_get('i18n_node_'. $node->type, LANGUAGE_SUPPORT_NORMAL) == LANGUAGE_SUPPORT_EXTENDED) {
      $languages = language_list();
      $extended = array();
      foreach (translation_node_get_translations($node->tnid) as $langcode => $translation_node) {
        if (!isset($links[$langcode]) && isset($languages[$langcode])) {
          $extended[$langcode] = array(
            'href' => 'node/'. $translation_node->nid . $matches[2],
            'language' => $language,
            'language_icon' => $languages[$langcode],
            'title' => $languages[$langcode]->native,
            'attributes' => array('class' => 'language-link'),
          );
        }
      }
      // This will run after languageicon module, so we add icon in case that one is enabled.
      if ($extended && function_exists('languageicons_translation_link_alter')) {
        languageicons_translation_link_alter($extended, $path);
      }
      $links = array_merge($links, $extended);
    }
  }
}


/**
 * Implements hook_link_alter().
 *
 * Handles links for extended languages. Sets current interface language.
 */
function i18n_node_link_alter(&$links, $node) {
  global $language;

  $language_support = variable_get('i18n_node_'. $node->type, LANGUAGE_SUPPORT_NORMAL);

  // Hide node translation links.
  if (variable_get('i18n_hide_translation_links', 0) == 1) {
    foreach ($links as $module => $link) {
      if (strpos($module, 'node_translation') === 0) {
        unset($links[$module]);
      }
    }
  }

  if (!empty($node->tnid)) {
    foreach (array_keys(i18n_node_language_list('extended')) as $langcode) {
      $index = 'node_translation_'. $langcode;
      if (!empty($links[$index])) {
        if ($language_support != LANGUAGE_SUPPORT_EXTENDED && $links[$index]['language']->enabled == 0) {
          unset($links[$index]);
        }
        else {
          $links[$index]['language'] = $language;
        }
      }
    }
  }
}


/**
 * Implements hook_elements().
 *
 * Add a process callback for textfields.
 */
function i18n_node_elements() {
  $type = array();
  $type['textfield'] = array('#process' => array('i18n_node_textfield_process'));
  return $type;
}

/**
 * Process callback for textfield elements.
 *
 * When editing or translating a node, set Javascript to rewrite autocomplete
 * paths to use the node language prefix rather than the current content one.
 */
function i18n_node_textfield_process($element) {
  global $language;
  static $sent = FALSE;

  // Ensure we send the Javascript only once.
  if (!$sent && isset($element['#autocomplete_path']) && !empty($element['#autocomplete_path']) && variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE) != LANGUAGE_NEGOTIATION_NONE) {
    // Add a JS file for node forms.
    // Determine if we are either editing or translating an existing node.
    // We can't act on regular node creation because we don't have a specified
    // node language.
    $node_edit = $node = menu_get_object() && arg(2) == 'edit' && isset($node->language) && !empty($node->language);
    $node_translate = arg(0) == 'node' && arg(1) == 'add' && !empty($_GET['translation']) && !empty($_GET['language']);
    if ($node_edit || $node_translate) {
      $node_language = $node_edit ? $node->language : $_GET['language'];
      // Only needed if the node language is different from the interface one.
      if ($node_language != $language->language) {
        $languages = language_list();
        if (isset($languages[$node_language])) {
          drupal_add_js(drupal_get_path('module', 'i18n_node') . '/i18n_node.js');
          // Pass the interface and content language base paths.
          // Remove any trailing forward slash. Doing so prevents a mismatch
          // that occurs when a language has no prefix and hence gets a path
          // with a trailing forward slash.
          $interface = rtrim(url('', array('absolute' => TRUE)), '/');
          $content = rtrim(url('', array('absolute' => TRUE, 'language' => $languages[$node_language])), '/');
          $data = array('interface_path' => $interface, 'content_path' => $content);
          drupal_add_js(array('i18n' => $data), 'setting');
        }
      }
    }
    $sent = TRUE;
  }
  return $element;
}

/**
 * Implements hook_form_alter();
 *
 * This is the place to add language fields to all forms.
 */
function i18n_node_form_alter(&$form, $form_state, $form_id) {
  global $language;

  switch ($form_id) {
    case 'node_type_form':
      $disabled = !variable_get('language_content_type_'. $form['#node_type']->type, 0);
      $form['i18n'] = array(
        '#type' => 'fieldset',
        '#title' => t('Multilanguage options'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#description' => t('Extended multilingual options provided by Internationalization module.'),
        '#disabled' => $disabled,
      );
      // Add disabled message
      if ($disabled) {
        $form['i18n']['#description'] .= ' <em>' . t('These will be available only when you enable Multilingual support in Workflow settings above.') . '</em>';
      }
      // Some settings about node languages
      $form['i18n']['options'] = array(
        '#title' => t('Options for node language'),
        '#type' => 'fieldset',
        '#disabled' => $disabled,
      );
      $form['i18n']['options']['i18n_newnode_current'] = array(
        '#type' => 'checkbox',
        '#title' => t('Set current language as default for new content.'),
        '#default_value' => variable_get('i18n_newnode_current_' . $form['#node_type']->type, 0),
        '#disabled' => $disabled,
      );
      $form['i18n']['options']['i18n_required_node'] = array(
        '#type' => 'checkbox',
        '#title' => t('Require language (Do not allow Language Neutral).'),
        '#default_value' => variable_get('i18n_required_node_' . $form['#node_type']->type, 0),
        '#disabled' => $disabled,
      );
      $form['i18n']['options']['i18n_lock_node'] = array(
        '#type' => 'checkbox',
        '#title' => t('Lock language (Cannot be changed).'),
        '#default_value' => variable_get('i18n_lock_node_' . $form['#node_type']->type, 0),
        '#disabled' => $disabled,
      );
      // Add extended language support option to content type form.
      $form['i18n']['i18n_node'] = array(
        '#type' => 'radios',
        '#title' => t('Extended language support'),
        '#default_value' => variable_get('i18n_node_'. $form['#node_type']->type, LANGUAGE_SUPPORT_NORMAL),
        '#options' => _i18n_node_language_options(),
        '#description' => t('If enabled, all defined languages will be allowed for this content type in addition to only enabled ones. This is useful to have more languages for content than for the interface.'),
        '#disabled' => $disabled,
      );
      break;

    default:
      // Extensions for node edit forms
      if (isset($form['#id']) && $form['#id'] == 'node-form') {
        if (isset($form['#node']->type)) {
          if (variable_get('language_content_type_'. $form['#node']->type, 0)) {
            if (!empty($form['language']['#options'])) {
              $form['language']['#options'] = i18n_node_language_list($form['#node'], TRUE);
            }
          }
          elseif (!isset($form['#node']->nid)) {
            // Set language to empty for not multilingual nodes when creating
            $form['language'] = array('#type' => 'value', '#value' => '');
          }
        }
      }
  }
}

/**
 * Implements hook_theme().
 */
function i18n_node_theme() {
  return array(
    'i18n_node_select_translation' => array(
      'arguments' => array('element' => NULL),
      'file' => 'i18n_node.pages.inc',
    ),
  );
}

/**
 * List of language support modes for content.
 */
function _i18n_node_language_options() {
  return array(
    LANGUAGE_SUPPORT_NORMAL => t('Normal - All enabled languages will be allowed.'),
    LANGUAGE_SUPPORT_EXTENDED => t('Extended - All defined languages will be allowed.'),
    LANGUAGE_SUPPORT_EXTENDED_NOT_DISPLAYED => t('Extended, but not displayed - All defined languages will be allowed for input, but not displayed in links.'),
  );
}
